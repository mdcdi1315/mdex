plugins {
    id 'multiloader-loader'
    id 'net.neoforged.moddev.legacyforge'
    id 'net.darkhax.curseforgegradle'
    id "com.modrinth.minotaur"
}

mixin {
    def refmapfile = "${mod_id}.refmap.json"
    add(sourceSets.main, refmapfile)

    config("${mod_id}.mixins.json")
    config("${mod_id}.forge.mixins.json")
}

base {
    archivesName = "${mod_id}-Forge-${minecraft_version}-${release_cycle}"
}

legacyForge {
    version = "${minecraft_version}-${forge_version}"

    validateAccessTransformers = true

    def at = project(':common').file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers = ["src/main/resources/META-INF/accesstransformer.cfg"]
    }

    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }

    runs {
        client {

            client()
        }
        server {
            server()
        }
        data {
            data()
        }
    }
    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
}

jar {
    finalizedBy('reobfJar')
    manifest.attributes([
            "MixinConfigs": "${mod_id}.mixins.json,${mod_id}.forge.mixins.json"
    ])
}

apply from: rootProject.file('repositories.gradle')
apply from: 'dependencies.gradle'

task curseforge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    dependsOn('build')
    description = 'Publishes the Forge build to CurseForge.'
    group = 'publishing'

    apiToken = project.findProperty("curseforge.api_key") ?: System.getenv("CURSEFORGE_TOKEN") ?: "none"

    def projectId = findProperty("curseforge_project_id")
    onlyIf {
        projectId != null
    }
    if (projectId) {
        def mainFile = upload(findProperty("curseforge_project_id"), file("${project.buildDir}/libs/${base.archivesName}-${version}.jar"))
        mainFile.changelog = rootProject.file('CHANGELOG.md').text
        mainFile.addRequirement("balm")
        project.minecraft_versions.split(',').toList().each { mainFile.addGameVersion(it) }
        mainFile.releaseType = "release"
    }
}

modrinth {
    token = project.findProperty("modrinth.token") ?: System.getenv("MODRINTH_TOKEN") ?: "none"
    projectId = findProperty("modrinth_project_id")
    versionType = "release"
    versionNumber = project.version + "+forge-" + project.minecraft_version
    uploadFile = jar
    changelog = rootProject.file("CHANGELOG.md").text
    gameVersions = project.minecraft_versions.split(',').toList()
    syncBodyFrom = rootProject.file("modpage.md").text
    loaders = ['forge']
    dependencies {
        required.project "balm"
    }
}