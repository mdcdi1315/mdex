
import java.nio.file.Files
import java.nio.file.StandardCopyOption

plugins {
    id 'multiloader-loader'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
    id 'net.darkhax.curseforgegradle'
    id "com.modrinth.minotaur"
}

repositories {
    mavenCentral()

    // This is a fix for Gradle since it does not use the libraries source and this causes issues on OSX.
    exclusiveContent {
        forRepository {
            maven {
                url = "https://libraries.minecraft.net"
            }
        }
        filter {
            includeVersion('org.lwjgl', 'lwjgl-freetype', '3.3.3')
        }
    }
}

base {
    archivesName = "${mod_id}-forge-${release_cycle}-${minecraft_version}"
}

mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")

    config("${mod_id}.mixins.json")
    config("${mod_id}.forge.mixins.json")
}

jar {
    manifest {
        attributes["MixinConfigs"] = "${mod_id}.mixins.json,${mod_id}.forge.mixins.json"
    }
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    reobf = false

    copyIdeResources = true

    // Automatically enable forge AccessTransformers if the file exists
    def at = file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformer = at
    }

    runs {
        client {
            workingDirectory file('runs/client')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName "Client"

            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                modClientRun {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory file('runs/server')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName "Server"

            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                modServerRun {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory file('runs/data')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName "Data"

            mods {
                modDataRun {
                    source sourceSets.main
                }
            }
        }
    }
}

// Modify the processResources task to manually copy the refmap and plant into the mod data.
tasks.named("processResources") {
    doFirst {
        logger.debug("FORGE: Copying refmap to resources directory\n")
        try {
            Files.copy(file("build/tmp/compileJava/${mod_id}.refmap.json").toPath(), project(":forge").file("src/generated/resources/${mod_id}.refmap.json").toPath(), StandardCopyOption.REPLACE_EXISTING)
        } catch (IOException ioex) {
            logger.error("ERR: Cannot copy refmap to specified directory because of an I/O exception." , ioex)
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    // temporary hacky fix as suggested by Forge
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }
}

apply from: rootProject.file('repositories.gradle')
apply from: 'dependencies.gradle'

publishing {
    publications {
        mavenJava(MavenPublication) {
            fg.component(it)
        }
    }
}

task curseforge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    dependsOn('build')
    description = 'Publishes the Forge build to CurseForge.'
    group = 'publishing'

    apiToken = project.findProperty("curseforge.api_key") ?: System.getenv("CURSEFORGE_TOKEN") ?: "none"

    def projectId = findProperty("curseforge_project_id")
    onlyIf {
        projectId != null
    }
    if (projectId) {
        def mainFile = upload(findProperty("curseforge_project_id"), file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))
        mainFile.changelog = rootProject.file('CHANGELOG.md').text
        mainFile.addRequirement("balm")
        project.minecraft_versions.split(',').toList().each { mainFile.addGameVersion(it) }
        mainFile.releaseType = "release"
    }
}

modrinth {
    token = project.findProperty("modrinth.token") ?: System.getenv("MODRINTH_TOKEN") ?: "none"
    projectId = findProperty("modrinth_project_id")
    versionType = "release"
    versionNumber = project.version + "+forge-" + project.minecraft_version
    uploadFile = jar
    changelog = rootProject.file("CHANGELOG.md").text
    gameVersions = project.minecraft_versions.split(',').toList()
    syncBodyFrom = rootProject.file("modpage.md").text
    loaders = ['forge']
    dependencies {
        required.project "balm"
    }
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}